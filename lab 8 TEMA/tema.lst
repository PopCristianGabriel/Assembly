     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf
     8                                  import printf msvcrt.dll                ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  import scanf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15                                      ;ENUNT
    16                                      ;Two numbers a and b are given. Compute the expression value: (a-b)*k, where k is a constant value defined in data segment. Display the expression value (in base 16). 
    17 00000000 <res 00000004>              a resd 1
    18 00000004 <res 00000004>              b resd 1
    19 00000008 07                          k db 7
    20 00000009 256400                      format  db "%d", 0
    21 0000000C 52657A756C74617475-         message  db "Rezultatul expresiei (a-b)*k = %X", 0 
    21 00000015 6C2065787072657369-
    21 0000001E 65692028612D62292A-
    21 00000027 6B203D20255800     
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 68[00000000]                    push dword a       ; pushing the parameters on the stack from right to left
    27 00000005 68[09000000]            		push dword format
    28 0000000A FF15[00000000]          		call [scanf]       ; calling the scanf function for reading
    29 00000010 83C408                  		add esp, 4 * 2     ; cleaning the parameters from the stack
    30                                  		; ...
    31 00000013 68[04000000]                     push dword b       ; pushing the parameters on the stack from right to left
    32 00000018 68[09000000]            		push dword format
    33 0000001D FF15[00000000]          		call [scanf]       ; calling the scanf function for reading
    34 00000023 83C408                  		add esp, 4 * 2     ; cleaning the parameters from the stack
    35                                  		; ...
    36 00000026 B800000000                      mov eax,0
    37 0000002B A0[00000000]                    mov al,[a]
    38 00000030 BB00000000                      mov ebx,0
    39 00000035 8A1D[04000000]                  mov bl,[b]
    40 0000003B 28D8                            sub al,bl
    41 0000003D F625[08000000]                  mul byte [k]
    42 00000043 50                              push eax
    43 00000044 68[0C000000]                    push dword message
    44 00000049 FF15[00000000]                  call [printf]
    45 0000004F 83C408                          add esp, 4*2
    46                                          ; exit(0)
    47 00000052 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 00000054 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
