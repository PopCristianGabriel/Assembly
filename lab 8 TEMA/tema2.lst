     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf,fopen, fclose ,fprintf             ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  import printf msvcrt.dll
    15                                  
    16                                  ;ENUNT 
    17                                  ;A file name (defined in data segment) is given. Create a file with the given name, 
    18                                  ;then read words from the keyboard until character '$' is read. Write only the words that contain at least one uppercase letter to file. 
    19                                  
    20                                  
    21                                  ; our data is declared here (the variables needed by our program)
    22                                  segment data use32 class=data
    23                                      ; ...
    24 00000000 65752E74787400          file_name db "eu.txt", 0
    25 00000007 7700                    access_mode db "w", 0
    26 00000009 FFFFFFFF                file_descriptor dd -1
    27                                  
    28 0000000D 456E74657220612077-     message db "Enter a word:",0
    28 00000016 6F72643A00         
    29 0000001B 2573                    format db "%s"
    30 0000001D 2000                    spatiu db " ",0
    31 0000001F 00000000                index dd 0
    32 00000023 00000000                ok dd 0
    33 00000027 <res 00000004>          s resd 1
    34                                  ; our code starts here
    35                                  segment code use32 class=code
    36                                      start:
    37                                          ; ...
    38 00000000 68[07000000]                    push dword access_mode     
    39 00000005 68[00000000]                    push dword file_name
    40 0000000A FF15[00000000]                  call [fopen]
    41 00000010 83C408                          add esp, 4*2                ; clean-up the stack
    42                                  
    43 00000013 A3[09000000]                    mov [file_descriptor], eax  ; store the file descriptor returned by fopen
    44                                         
    45                                          ; check if fopen() has successfully created the file (EAX != 0)
    46 00000018 83F800                          cmp eax, 0
    47 0000001B 0F84A9000000                    je final
    48                                  
    49                                          
    50                                         inceput:
    51 00000021 68[0D000000]                   push dword message
    52 00000026 FF15[00000000]                 call[printf]
    53 0000002C 83C404                         add esp,4
    54                                         
    55                                         
    56 0000002F 68[27000000]                   push dword s
    57 00000034 68[1B000000]                   push dword format
    58 00000039 FF15[00000000]                 call[scanf]
    59 0000003F 83C408                         add esp,4*2
    60 00000042 BE[27000000]                   mov esi,s
    61                                         
    62 00000047 AC                             lodsb
    63 00000048 6698                           cbw
    64 0000004A 6699                           cwd
    65 0000004C BB24000000                     mov ebx,"$"
    66 00000051 39C3                           cmp ebx,eax
    67 00000053 7475                           je final
    68                                          
    69 00000055 C705[1F000000]0000-            mov [index],dword 0
    69 0000005D 0000               
    70 0000005F C705[23000000]0000-            mov [ok],dword 0
    70 00000067 0000               
    71 00000069 B800000000                     mov eax,0
    72 0000006E BE[27000000]                   mov esi,s
    73                                         verificare:
    74 00000073 AC                             lodsb
    75 00000074 3C00                           cmp al,0
    76 00000076 741C                           je decide
    77 00000078 3C41                           cmp al,"A"
    78 0000007A 7302                           jae cmp2
    79                                         
    80                                         
    81 0000007C EB0E                           jmp continua
    82                                         
    83                                         cmp2:
    84 0000007E 3C5A                           cmp al, "Z"
    85 00000080 770A                           ja continua
    86 00000082 C705[23000000]0100-            mov [ok], dword 1
    86 0000008A 0000               
    87                                         
    88                                         
    89                                         continua :
    90 0000008C FF05[1F000000]                 inc dword [index]
    91 00000092 EBDF                           jmp verificare
    92                                         
    93                                         
    94                                         
    95                                         decide:
    96 00000094 833D[23000000]00               cmp [ok],dword 0
    97 0000009B 7484                           je inceput
    98 0000009D 68[27000000]                   push dword s
    99 000000A2 FF35[09000000]                 push dword [file_descriptor]
   100 000000A8 FF15[00000000]                 call [fprintf]
   101 000000AE 83C408                         add esp, 4*2
   102                                         
   103 000000B1 68[1D000000]                   push dword spatiu
   104 000000B6 FF35[09000000]                 push dword [file_descriptor]
   105 000000BC FF15[00000000]                 call [fprintf]
   106 000000C2 83C408                         add esp, 4*2
   107                                      
   108 000000C5 E957FFFFFF                     jmp inceput
   109                                         
   110                                          final:
   111                                          ; exit(0)
   112 000000CA FF35[09000000]                  push dword [file_descriptor]
   113 000000D0 FF15[00000000]                  call [fclose]
   114 000000D6 83C404                          add esp, 4
   115                                  
   116 000000D9 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   117 000000DB FF15[00000000]                  call    [exit]       ; call exit to terminate the program
