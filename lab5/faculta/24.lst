     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                  
    14                                      ;Two byte strings A and B are given. Obtain the string R by concatenating the elements of B in reverse order and the elements of A in reverse order. 
    15                                  ;Example:
    16                                  ;A: 2, 1, -3, 0
    17                                  ;B: 4, 5, 7, 6, 2, 1
    18                                  ;R: 1, 2, 6, 7, 5, 4, 0, -3, 1, 2
    19                                  
    20                                  
    21                                      ; ...
    22 00000000 33353732                    a db '3' , '5', '7' ,'2'
    23                                      lengthA equ $ - a
    24 00000004 393031313137                b db '9' , '0' , '1' , '11', '7'
    25                                      lengthB equ $ - b
    26 0000000A 00<rept>                    rez times (lengthA+lengthB) db 0
    27                                          
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; ...
    32 00000000 31C9                        xor ecx,ecx 
    33 00000002 B906000000                  mov ecx,lengthB ; se stocheaza in ecx lungimea sirului b
    34 00000007 E336                        jecxz sfarsit ; daca nu exista lungime, se salta la final
    35 00000009 BE05000000                  mov esi,lengthB-1  ;ne plasam la finalul sirului b
    36 0000000E BF00000000                  mov edi,0
    37                                      
    38                                      
    39                                      
    40                                      Repeta:
    41 00000013 8A86[04000000]                  mov al,[b+esi] ; in al se pune ultimul caracter al sirului b
    42 00000019 8887[0A000000]                  mov [rez+edi],al ; la inceputul sirului rezultat se pune al
    43 0000001F 4E                              dec esi ; se decrementeaza esi
    44 00000020 47                              inc edi ; se incrementeaza edi
    45 00000021 E2F0                        loop Repeta
    46                                      
    47                                      ;LA FEL PT SIURL A
    48                                      
    49 00000023 B904000000                  mov ecx,lengthA
    50 00000028 E315                        jecxz sfarsit
    51 0000002A BE03000000                  mov esi,lengthA-1
    52                                      Repeta2:
    53 0000002F 8A86[00000000]                  mov al,[a+esi]
    54 00000035 8887[0A000000]                  mov [rez+edi],al
    55 0000003B 4E                              dec esi
    56 0000003C 47                              inc edi
    57 0000003D E2F0                        loop Repeta2
    58                                      
    59                                      sfarsit:
    60                                          ; exit(0)
    61 0000003F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 00000041 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
