     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf,fopen,fclose,fread               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fread msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 FFFFFFFF                    fileDescriptor dd -1       ; variable to hold the file descriptor
    19                                      len equ 100                 ; maximum number of characters to read
    20 00000004 00000000<rept>              text times (len+1) dd 0  
    21 00000198 656E74657220612066-         intrebare db "enter a file name:",0
    21 000001A1 696C65206E616D653A-
    21 000001AA 00                 
    22 000001AB 00000000                    fileName dd 0
    23 000001AF 257300                      fileNameFormat db "%s",0
    24 000001B2 7200                        accesMode db "r",0
    25 000001B4 <res 0000000C>              cuvant resd 3
    26 000001C0 <res 00000004>              salvare resd 1
    27 000001C4 0000                        index dw 0
    28 000001C6 257300                      formatPrintare db"%s",0
    29 000001C9 25732000                    formatPrintare2 db"%s ",0
    30 000001CD 00                          litera db 0
    31 000001CE 00                          spatiu db 0
    32                                  ; our code starts here
    33                                  segment code use32 class=code
    34                                      start:
    35                                          ; ...
    36                                          
    37 00000000 C605[CE010000]20                mov byte [spatiu], " "
    38 00000007 68[98010000]                    push dword intrebare
    39 0000000C FF15[00000000]                  call [printf]
    40 00000012 83C404                          add esp,4*1
    41                                          
    42                                          
    43                                          
    44 00000015 68[AB010000]                    push dword fileName
    45 0000001A 68[AF010000]                    push dword fileNameFormat
    46 0000001F FF15[00000000]                  call [scanf]
    47 00000025 83C408                          add esp,4*2
    48                                          
    49 00000028 A1[AB010000]                    mov eax,[fileName]
    50                                          
    51                                          
    52                                          
    53 0000002D 68[B2010000]                    push dword accesMode
    54 00000032 68[AB010000]                    push dword fileName
    55 00000037 FF15[00000000]                  call [fopen]
    56 0000003D 83C408                          add esp,4*2
    57                                          
    58                                          
    59 00000040 83F800                          cmp eax,0
    60 00000043 0F84A3000000                    je final
    61 00000049 A3[00000000]                    mov [fileDescriptor],eax
    62                                          
    63                                          
    64 0000004E FF35[00000000]                  push dword [fileDescriptor]
    65 00000054 6A64                            push dword len
    66 00000056 6A01                            push dword 1
    67 00000058 68[04000000]                    push dword text
    68 0000005D FF15[00000000]                  call [fread]
    69 00000063 83C410                          add esp,4*4
    70                                          
    71 00000066 BE[04000000]                    mov esi,text
    72 0000006B BF[B5010000]                    mov edi,cuvant + 1
    73 00000070 C705[B4010000]0000-             mov dword [cuvant],0
    73 00000078 0000               
    74                                          
    75                                          bucla:
    76 0000007A FC                              cld
    77 0000007B 66C705[C4010000]00-             mov word[index],0
    77 00000083 00                 
    78 00000084 AC                              lodsb
    79 00000085 3C24                            cmp al,"$"
    80 00000087 7463                            je final
    81 00000089 3C2E                            cmp al,"."
    82 0000008B 740E                            je inversare
    83 0000008D 3C20                            cmp al," "
    84 0000008F 7403                            je reset
    85 00000091 AA                              stosb
    86 00000092 EBE6                            jmp bucla
    87                                          
    88                                          
    89                                          reset:
    90 00000094 BF[B5010000]                    mov edi,cuvant+1
    91 00000099 EBDF                            jmp bucla
    92                                          
    93                                          inversare:
    94 0000009B 8935[C0010000]                  mov [salvare],esi
    95                                         
    96 000000A1 89FE                            mov esi,edi
    97 000000A3 31C0                            xor eax ,eax
    98 000000A5 FD                              std
    99 000000A6 AC                              lodsb
   100 000000A7 EB00                            jmp inversare2
   101                                          
   102                                          inversare2:
   103 000000A9 FD                              std
   104 000000AA 66FF05[C4010000]                inc word [index]
   105                                          
   106                                          
   107 000000B1 AC                              lodsb
   108 000000B2 83F800                          cmp eax,0
   109 000000B5 741A                            je terminare
   110                                          
   111 000000B7 A3[CD010000]                    mov [litera],eax
   112 000000BC 68[CD010000]                    push dword litera
   113 000000C1 68[C6010000]                    push dword formatPrintare
   114 000000C6 FF15[00000000]                  call[printf]
   115 000000CC 83C408                          add esp,4*2
   116 000000CF EBD8                            jmp inversare2
   117                                          
   118                                          
   119                                          terminare:
   120 000000D1 8B35[C0010000]                  mov esi,[salvare]
   121                                          
   122 000000D7 68[CE010000]                    push dword spatiu
   123 000000DC 68[C9010000]                    push dword formatPrintare2
   124 000000E1 FF15[00000000]                  call [printf]
   125 000000E7 83C408                          add esp,4*2
   126 000000EA EB8E                            jmp bucla
   127                                          
   128                                          
   129                                          
   130                                          
   131                                          final:
   132 000000EC FF35[00000000]                  push dword [fileDescriptor]
   133 000000F2 FF15[00000000]                  call [fclose]
   134 000000F8 83C404                          add esp,4
   135                                          
   136                                          
   137                                          ; exit(0)
   138 000000FB 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   139 000000FD FF15[00000000]                  call    [exit]       ; call exit to terminate the program
