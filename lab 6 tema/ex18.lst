     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                                            
    12                                  ;A string of doublewords is given. Order in increasing order the string of the high words (most significant) from these doublewords. The low words (least significant) remain unchanged. 
    13                                  ;Example:
    14                                  ;being given 
    15                                  ;sir DD 12AB5678h, 1256ABCDh, 12344344h 
    16                                  ;the result will be 
    17                                  ;       12345678h, 1256ABCDh, 12AB4344h.
    18                                                            
    19                                  ; our data is declared here (the variables needed by our program)
    20                                  
    21                                  
    22                                  segment data use32 class=data
    23                                      ; ...
    24                                      ;       dx   bx   high low
    25 00000000 7856AB12CDAB561244-         sir dd 12AB5678h, 1256ABCDh, 12344344h
    25 00000009 433412             
    26                                      lungimeSir equ $-sir
    27 0000000C 00000000<rept>              rez times lungimeSir dd 0
    28 0000003C 00000000                    doubleA dd 0
    29                                      
    30 00000040 04                          doubleWordConstant db 4
    31 00000041 04000000                    index dd 4
    32 00000045 <res 00000001>              ok resb 1
    33                                      
    34 00000046 0400                        patru dw 4
    35                                      
    36 00000048 <res 00000002>              highWord resw 1
    37 0000004A <res 00000002>              lowWord resw 1
    38                                  ; our code starts here
    39                                  segment code use32 class=code
    40                                      start:
    41                                          ; ...
    42                                          
    43 00000000 B90C000000                      mov ecx,lungimeSir
    44 00000005 FC                              cld
    45                                         inceput:
    46                                         
    47 00000006 C605[45000000]01               mov [ok],byte 1
    48                                         
    49                                         
    50                                         ;1234 5678h, 1256 ABCDh
    51 0000000D 8B0D[41000000]                 mov ecx,[index]
    52                                         
    53                                         repeat:
    54                                  
    55 00000013 BE[04000000]                   mov esi,sir+4
    56                                         
    57 00000018 E2F9                           loop repeat
    58                                         
    59                                         
    60                                         
    61 0000001A AD                             lodsd
    62 0000001B A3[3C000000]                   mov [doubleA],eax
    63 00000020 668B1D[3C000000]               mov bx,[doubleA];in bx am primul lowWord ->5678
    64 00000027 668B15[3E000000]               mov dx,[doubleA+2]; in dx am primul highword->1234
    65 0000002E 66891D[4A000000]               mov [lowWord],bx ; in lowWord am primul lowWord
    66 00000035 668915[48000000]               mov [highWord],dx ; in highWord am primul highWord
    67                                        
    68                                         
    69 0000003C AD                             lodsd
    70 0000003D A3[3C000000]                   mov [doubleA],eax ; in eax am al doilea double word
    71 00000042 668B1D[3C000000]               mov bx,[doubleA]  ; in bx am al doilea low Word->ABCD
    72 00000049 668B15[3E000000]               mov dx,[doubleA+2]  ; in dx am al doilea High Word->1256
    73                                         
    74                                         
    75 00000050 663915[48000000]               cmp  [highWord],dx
    76 00000057 7702                           ja schimba
    77                                         
    78                                         ;                    high  low   dx   bx
    79                                         ;sir dd 12AB 5678h, 1256 ABCDh, 1234 4344h
    80                                         
    81 00000059 EB2E                           jmp sari_peste_schimbare
    82                                         
    83                                         schimba:
    84 0000005B 66FF35[48000000]               push word[highWord]
    85 00000062 6653                           push bx
    86 00000064 5A                             pop edx ; in edx am numarul mai mare
    87 00000065 6652                           push dx
    88 00000067 66FF35[4A000000]               push word [lowWord]
    89 0000006E 5B                             pop ebx ; in ebx am numarul mai  mic
    90 0000006F BE[41000000]                   mov esi, index
    91 00000074 891CB5[00000000]               mov [sir+esi*4],ebx
    92 0000007B 8914B5[04000000]               mov [sir+(esi+1)*4],edx
    93 00000082 C605[45000000]00               mov [ok],byte 0
    94                                         
    95                                         sari_peste_schimbare:
    96                                         
    97 00000089 FF05[41000000]                 inc dword [index]
    98 0000008F B30C                           mov bl,lungimeSir
    99 00000091 381D[41000000]                 cmp [index],bl  ; daca indexul a ajuns la final
   100 00000097 7405                           je verificaSir   ; verifica daca sirul este ordonat crescator in verificaSir
   101 00000099 E968FFFFFF                     jmp inceput
   102                                         
   103                                         
   104                                         
   105                                         
   106                                         verificaSir:
   107 0000009E 803D[45000000]01               cmp [ok],byte 1 ; daca sirul e ordonat crescator
   108 000000A5 740C                           je termina      ;termina
   109 000000A7 C605[41000000]00               mov [index],byte 0 ; daca nu, incepem de la inceput cu indexul 0
   110 000000AE E953FFFFFF                     jmp inceput
   111                                         
   112                                         
   113                                         termina:
   114                                         
   115                                         sari_peste:
   116                                         
   117                                          
   118                                          ; exit(0)
   119                                          
   120                                          
   121 000000B3 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   122 000000B5 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
