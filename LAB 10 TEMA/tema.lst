     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll 
    10                                  import scanf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                                            
    14                                                            
    15                                                          
    16                                                            
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20                                  
    21 00000000 <res 00000004>              rez resd 1
    22 00000004 <res 00000004>              a resd 1
    23 00000008 <res 00000004>              b resd 1
    24 0000000C <res 00000004>              c resd 1
    25 00000010 256400                      format  db "%d", 0
    26                                      
    27                                      ;ENUNT
    28                                      ;Read the signed numbers a, b and c on type byte; calculate and display a+b-c. 
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                  
    32                                  
    33                                  sumABC:
    34 00000000 8B442404                 mov eax,[esp+4]
    35 00000004 8B5C2408                 mov ebx,[esp+8]
    36 00000008 8B4C240C                 mov ecx,[esp+12]
    37 0000000C 01D8                     add eax,ebx
    38 0000000E 01C8                     add eax,ecx
    39 00000010 A3[00000000]             mov [rez],eax
    40 00000015 C3                       ret
    41                                  
    42                                      start:
    43                                          ; ...
    44 00000016 68[04000000]                    push dword a       ; pushing the parameters on the stack from right to left
    45 0000001B 68[10000000]            		push dword format
    46 00000020 FF15[00000000]          		call [scanf]
    47 00000026 83C408                          add esp, 4 * 2
    48                                          
    49 00000029 A1[04000000]                    mov eax,[a]
    50                                           
    51 0000002E 68[08000000]                    push dword b       ; pushing the parameters on the stack from right to left
    52 00000033 68[10000000]            		push dword format
    53 00000038 FF15[00000000]          		call [scanf]   
    54 0000003E 83C408                          add esp, 4 * 2
    55                                          
    56 00000041 A1[08000000]                    mov eax,[b]
    57                                          
    58 00000046 68[0C000000]                    push dword c       ; pushing the parameters on the stack from right to left
    59 0000004B 68[10000000]            		push dword format
    60 00000050 FF15[00000000]          		call [scanf]  
    61 00000056 83C408                          add esp, 4 * 2
    62                                          
    63 00000059 A1[0C000000]                    mov eax,[c]
    64                                          
    65 0000005E FF35[04000000]                  push dword [a]
    66 00000064 FF35[08000000]                  push dword [b]
    67 0000006A FF35[0C000000]                  push dword [c]
    68                                          
    69                                          
    70 00000070 E88BFFFFFF                      call sumABC
    71 00000075 83C40C                          add esp,4*3
    72 00000078 8B1D[00000000]                  mov ebx,[rez]
    73 0000007E FF35[00000000]                  push dword [rez]
    74 00000084 68[10000000]                    push dword format
    75 00000089 FF15[00000000]                  call [printf]
    76 0000008F 83C404                          add esp,4
    77                                          ; exit(0)
    78 00000092 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    79 00000094 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
