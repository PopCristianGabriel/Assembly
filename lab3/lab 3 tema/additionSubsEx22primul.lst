     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;a - byte, b - word, c - double word, d - qword - UNSIGNED representation
    15                                      ;(d+c) - (c+b) - (b+a) 
    16                                      
    17 00000000 05                          a db 5
    18 00000001 0800                        b dw 8
    19 00000003 0A000000                    c dd 10
    20 00000007 0300000000000000            d dq 3
    21                                      
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 A0[00000000]                    mov al,[a]
    27 00000005 668B1D[01000000]                mov bx,[b]
    28 0000000C B400                            mov ah,0 ; in ax am a
    29 0000000E 6601D8                          add ax,bx ; in ax am b+a
    30 00000011 66BA0000                        mov dx,0 ; in dx:ax am b+a
    31 00000015 6652                            push dx
    32 00000017 6650                            push ax; in stiva am b+a
    33 00000019 59                              pop ecx ; in ecx am b+a
    34                                          
    35                                          
    36 0000001A 66A1[01000000]                  mov ax,[b]
    37 00000020 66BA0000                        mov dx,0 ; in dx:ax am b
    38 00000024 6652                            push dx
    39 00000026 6650                            push ax
    40 00000028 58                              pop eax
    41 00000029 8B1D[03000000]                  mov ebx,[c]
    42 0000002F 01D8                            add eax,ebx ; in ebx am c+b
    43 00000031 29C8                            sub eax,ecx;in eax am (c+b) - (b+a)
    44 00000033 50                              push eax
    45                                          
    46                                          
    47 00000034 8B1D[07000000]                  mov ebx,[d]
    48 0000003A 8B0D[0B000000]                  mov ecx,[d+4]
    49 00000040 A1[03000000]                    mov eax,[c]
    50 00000045 BA00000000                      mov edx,0
    51 0000004A 01D8                            add eax,ebx
    52 0000004C 11CA                            adc edx,ecx ; in edx:eax am d+c
    53 0000004E 5B                              pop ebx
    54 0000004F 29D8                            sub eax,ebx
    55 00000051 83DA00                          sbb edx,0 ; rezultatul il am in edx:eax
    56                                          
    57                                          
    58                                  
    59                                          
    60                                          
    61                                         
    62                                          
    63                                          
    64                                          
    65                                          ; exit(0)
    66 00000054 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    67 00000056 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
