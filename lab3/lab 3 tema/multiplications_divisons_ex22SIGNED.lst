     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;(a*b-2*c*d)/(c-e)+x/a
    15                                      ; a,b,c,d-byte; e-word; x-qword
    16 00000000 03                          a db 3
    17 00000001 06                          b db 6
    18 00000002 07                          c db 7
    19 00000003 05                          d db 5
    20 00000004 0A00                        e dw 10
    21 00000006 2100000000000000            x dq 33
    22                                      
    23                                      ;UNSIGNED REPRESENTATION
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 A0[00000000]                   mov al,[a]
    29 00000005 8A1D[01000000]                 mov bl,[b]
    30 0000000B F6E3                           mul bl; in ax am a*b
    31 0000000D 6689C1                         mov cx,ax;in cx am a*b
    32                                         
    33                                         
    34 00000010 A0[02000000]                   mov al,[c]
    35 00000015 8A1D[03000000]                 mov bl,[d]
    36 0000001B F6E3                           mul bl ; in ax am c*d
    37 0000001D 66BB0200                       mov bx,2
    38 00000021 66F7E3                         mul bx ; in dx:ax am 2*c*d
    39 00000024 6652                           push dx
    40 00000026 6650                           push ax
    41 00000028 5B                             pop ebx ;in eax am 2*c*d
    42                                         
    43                                         
    44 00000029 6689C8                         mov ax,cx ; in ax am a*b
    45 0000002C 66BA0000                       mov dx,0 ; in dx:ax am a*b
    46 00000030 6652                           push dx
    47 00000032 6650                           push ax
    48 00000034 58                             pop eax ; in eax am a*b
    49 00000035 29D8                           sub eax,ebx ; in eax am a*b-2*c*d
    50 00000037 50                             push eax ; l-am pus in stiva
    51                                         
    52 00000038 A0[02000000]                   mov al,[c]
    53 0000003D B400                           mov ah,0 ; in ax am c
    54 0000003F 668B1D[04000000]               mov bx,[e]
    55 00000046 6629D8                         sub ax,bx ; in ax am c-e
    56 00000049 6689C3                         mov bx,ax
    57                                         
    58                                         
    59 0000004C 58                             pop eax
    60 0000004D 66F7F3                         div word bx ; in dx am restul si in ax am catul lui (a*b-2*c*d)/(c-e)
    61 00000050 6689C1                         mov cx,ax ; acum e in cx
    62                                         
    63 00000053 A0[00000000]                   mov al,[a]
    64 00000058 B400                           mov ah,0
    65 0000005A 66BA0000                       mov dx,0
    66 0000005E 6652                           push dx
    67 00000060 6650                           push ax
    68 00000062 58                             pop eax ; in eax am a 
    69 00000063 89C3                           mov ebx,eax
    70 00000065 A1[06000000]                   mov eax ,[x]
    71 0000006A 8B15[0A000000]                 mov edx,[x+4] ; in edx:eax am x
    72 00000070 F7F3                           div dword ebx ; in eax am catul si in edx am restul lui x/a
    73 00000072 50                             push eax ; catul e in stiva
    74                                         
    75                                         
    76 00000073 6689C1                         mov cx,ax; (a*b-2*c*d)/(c-e) e in ax
    77 00000076 66BA0000                       mov dx,0 ; (a*b-2*c*d)/(c-e) e in dx:ax
    78 0000007A 6652                           push dx
    79 0000007C 6650                           push ax
    80 0000007E 58                             pop eax; (a*b-2*c*d)/(c-e) e in eax
    81                                         
    82                                         
    83 0000007F 5B                             pop ebx ;x/a
    84 00000080 29C3                           sub ebx,eax ;rezultatul e in ebx
    85                                         
    86                                          
    87                                          
    88                                          
    89                                          
    90                                          ; exit(0)
    91 00000082 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    92 00000084 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
